name: Build and deploy Django backend to Azure Web App

on:
  push:
    branches:
      - main
    paths:
      - 'backend/**'
      - '.github/workflows/main_recipe-api-dev98298.yml'
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - name: Install dependencies and run tests
        run: |
          cd backend
          python -m venv venv
          source venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements/base.txt
          pip install -r requirements/testing.txt
          # python -m pytest
        env:
          DJANGO_SETTINGS_MODULE: config.settings.testing
          DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
          JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}

      - name: Install production requirements
        run: |
          cd backend
          source venv/bin/activate
          # Install production requirements and verify PostgreSQL driver
          pip install -r requirements.txt
          python -c "import psycopg2; print('âœ… PostgreSQL driver (psycopg2) is available')"
          python -c "import whitenoise; print('âœ… WhiteNoise for static files is available')"
        env:
          DJANGO_SETTINGS_MODULE: config.settings.production
          DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
          JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}

      - name: Check migrations and collect static files
        run: |
          cd backend
          source venv/bin/activate
          python manage.py makemigrations --check --dry-run
          # Skip migrations during build - run them after deployment in Azure
          python manage.py collectstatic --noinput
        env:
          DJANGO_SETTINGS_MODULE: config.settings.production
          DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
          JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
          # Use SQLite fallback during build (no DB_* vars = SQLite mode)

      - name: Prepare deployment package
        run: |
          cd backend
          # Make startup script executable
          chmod +x startup.sh
          # Keep the existing requirements.txt that points to production.txt
          zip -r ../release.zip .
        
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: python-app
          path: release.zip

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'Production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: python-app

      - name: Extract deployment package
        run: unzip release.zip

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_A192B6B3D6974208845C7450A636618B }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_DAC3758E440A4723ABBA182D2DFDFD7D }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_2491E9699F3E4FE4ACDA072B4021A3E6 }}

      - name: Deploy to Azure Web App
        uses: azure/webapps-deploy@v3
        id: deploy-to-webapp
        with:
          app-name: 'recipe-api-dev98298'
          slot-name: 'Production'
          package: 'release.zip'

      - name: Configure Azure App Service startup
        run: |
          echo "Migrations and admin user creation will run automatically when the app starts in Azure"
          echo "Azure App Service will execute the startup commands defined in the deployed package"

      - name: Done!
        run: echo "ðŸš€ Deployment successful!"